# build development
build:
  image: docker/compose:latest
  stage: build
  services:
    - name: docker:dind
      command: ["--mtu=1450"]
  tags:
    - cluster
  before_script:
    - sh -c 'cat .${CI_COMMIT_REF_SLUG}.env >> Dockerfile'

  script:
    - export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
    - export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG .
    - docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master-dev"'

# deploy development
.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:latest"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master-dev"'


# build production
build:
  image: docker/compose:latest
  stage: build
  services:
    - name: docker:dind
      command: ["--mtu=1450"]
  tags:
    - cluster
  
  before_script:
    - sh -c 'cat .${CI_COMMIT_REF_SLUG}.env >> Dockerfile'
  
  script:
    - export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
    - export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG .
    - docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'

# deploy production

.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:latest"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
